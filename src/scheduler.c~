// scheduler.c - Kernel scheduler
// ***********************************************************************
// **   DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER   **
// **                                                                   **
// ** The code given here is the basis for the CS345 projects.          **
// ** It comes "as is" and "unwarranted."  As such, when you use part   **
// ** or all of the code, it becomes "yours" and you are responsible to **
// ** understand any algorithm or method presented.  Likewise, any      **
// ** errors or problems become your responsibility to fix.             **
// **                                                                   **
// **   DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER   **
// ***********************************************************************

//@DISABLE_SWAPS
#include <stdio.h>
#include <setjmp.h>
#include <assert.h>
#include <stdlib.h>
#include <time.h>
#include "scheduler.h"
#include "kernel.h"

#define DEBUG_S 0
#define RATE_BASE MED_PRIORITY

extern Node tasks[MAX_TASKS];
int virtual_runtime[MAX_TASKS];
bool ready_queue[MAX_TASKS];
struct timespec start_time, end_time;
int lowest_vrt;
int highest_vrt;

void printlvrt(int numtasks) {
	/*TCB* tcb = getTCB();
	int lvr = virtual_runtime[0];
	int lvr_tid = 0;
	int i;
	for (i = 0; i < numtasks; i++) {
		if (virtual_runtime[i] < lvr && virtual_runtime[i] > 0) {
			lvr = virtual_runtime[i];
			lvr_tid = i;
		}
	}
	printf("Lowest virtual runtime is task %d at %d with priority %d.\n", 
			lvr_tid, 
			lvr,
			tcb[lvr_tid].priority);*/
}

void printvrts(int taskNums) {
	/*int i;
	TCB* tcb = getTCB();
	for (i = 0; i < taskNums; i++) {
		printf("Virtual runtime for task %d: %d with priority %d.\n",
			   	i,
			   	virtual_runtime[i],
				tcb[i].priority);
	}*/
}

/**
 * initScheduler - do anything the scheduler needs to before kernel starts
 */
void initScheduler() {
    int i;
    for (i = 0; i < MAX_TASKS; i++) {
        tasks[i].tid = NO_TASK;
		virtual_runtime[i] = 0;
		ready_queue[i] = 0;
    }
	lowest_vrt = 0;
	highest_vrt = 0;
}

/**
 * scheduler(): return the next task to execute
 * @return: the task id of the next task to execute
 *
 * The scheduler should be a round-robin, preemptive, prioritized
 * scheduler. It should return the next highest priority ready task.
 * The selected task is removed from the scheduler until it is rescheduled.
 */
int scheduler() {
	if (DEBUG_S) printf("Scheduler()\n");

	int lvr = -1;
	int lvr_tid = -1;
	
	int i;
	for (i = 0; i < MAX_TASKS; i++) {
		//if task is in the ready queue and it's less than my current lowest vr
		if (ready_queue[i] == 1) {
		   if (lvr == -1 || (virtual_runtime[i] < lvr)) {
				lvr = virtual_runtime[i];
				lvr_tid = i;
		   }
			if (DEBUG_S) printf("in loop, lvr_tid: %d, lvr: %d\n", lvr_tid, lvr);
		}
	}
	if (lvr_tid == -1)
		return NO_TASK;

	ready_queue[lvr_tid] = 0; //take out of ready queue

	if (DEBUG_S) printf("Sch: lowest vrt tid: %d, vrt: %d\n", lvr_tid, lvr);
	clock_gettime(CLOCK_REALTIME, &start_time);
	return lvr_tid;
}

/**
 * reschedule: reschedule a task
 * @task: the task to reschedule
 *
 * This function causes a task to be rescheduled.
 */
void reschedule(int task) {
	if (DEBUG_S) printf("Reschedule()\n");
	ready_queue[task] = 1;
	TCB* tcb = getTCB();
	
	if (DEBUG_S) printf("task%d\n", task);
	if (DEBUG_S) printf("vrt%d\n",virtual_runtime[task]);
	
	if (tcb[task].state == S_EXIT) {
		if (DEBUG_S) printf("Res: task %d's state is exited\n", task);
		virtual_runtime[task] = 0;
		return;
	}
	if (DEBUG_S) printf("Res: old clock: %d, new clock: %d\n", 
					start_time.tv_nsec, 
					end_time.tv_nsec);
	if (DEBUG_S) printf("Res: new vrt of task: %d\n", virtual_runtime[task]);

	if (tcb[task].state == S_RUNNING ||
			tcb[task].state == S_READY) {
		//if we're rescheduling the current task,
		//update the time it's been on the processor
		if (DEBUG_S) printf("Res: task %d's state is running or ready\n", task);
		
		if (task == _gettid()) {
			
			clock_gettime(CLOCK_REALTIME, &end_time);
			virtual_runtime[task] += ((end_time.tv_nsec - start_time.tv_nsec)
				   						* RATE_BASE) / tcb[task].priority;
			
			if (virtual_runtime[task] <= lowest_vrt)
				lowest_vrt = virtual_runtime[task];
			
			if (highest_vrt <= virtual_runtime[task]) 
				highest_vrt = virtual_runtime[task];
			
			if (DEBUG_S) {
				printf("Res: task %d is curr task\n", task);
				printf("Res: old clock: %d, new clock: %d\n", 
							start_time.tv_nsec, 
							end_time.tv_nsec);
				printf("Res: new vrt of task: %d\n", virtual_runtime[task]);
			   	printf("lowest vrt is %d\n", lowest_vrt);
				printf("highest vrt is %d\n", highest_vrt);
			}
		}
		//else if brand new task, not current one
		else if (virtual_runtime[task] == 0) {
				virtual_runtime[task] = (highest_vrt - lowest_vrt)/ 2;
			if (DEBUG_S) printf("Res: vrt of task %d: %d\n", task, virtual_runtime[task]);
			//return;
		}
	}
    return;
}

/**
 * deschedule: remove a task from the ready queue
 * @task: the task to remove
 *
 * This function causes a task to be removed from the ready queue.
 */
void deschedule(int task) {
	if (DEBUG_S) printf("Deschedule()\n");
	//removeNode(task_queue, task);
	ready_queue[task] = 0;
	TCB* tcb = getTCB();
	if (tcb[task].state == S_BLOCKED) {
		if (DEBUG_S) printf("Des: Task %d is blocked\n", task);
		clock_gettime(CLOCK_REALTIME, &end_time);
		virtual_runtime[task] += ((end_time.tv_nsec - start_time.tv_nsec) 
							* RATE_BASE) / tcb[task].priority;
		if (DEBUG_S) printf("Des: vrt of task %d: %d\n", task, virtual_runtime[task]);
	}
	else {
		virtual_runtime[task] = 0;
		if (DEBUG_S) printf("Des: vrt of task %d is cleared\n", task);
	}
}

void clearScheduler() {
}

//@ENABLE_SWAPS
