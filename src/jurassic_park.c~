// Jurassic Park
// ***********************************************************************
// **   DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER   **
// **                                                                   **
// ** The code given here is the basis for the CS345 projects.          **
// ** It comes "as is" and "unwarranted."  As such, when you use part   **
// ** or all of the code, it becomes "yours" and you are responsible to **
// ** understand any algorithm or method presented.  Likewise, any      **
// ** errors or problems become your responsibility to fix.             **
// **                                                                   **
// ** NOTES:                                                            **
// ** -Comments beginning with "// ??" may require some implementation. **
// ** -Tab stops are set at every 3 spaces.                             **
// ** -The function API's in "OS345.h" should not be altered.           **
// **                                                                   **
// **   DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER ** DISCLAMER   **
// ***********************************************************************
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <setjmp.h>
#include <time.h>
#include <assert.h>
#include "jurassic_park.h"
#include "kernel.h"
#include "delta_clock.h"
#include "semaphores.h"
#include "system_calls.h"
#include "signals.h"

//#define DEBUG_ON TRUE
#ifdef DEBUG_ON
#define DEBUG_PRINT(fmt,...) printf(fmt,__VA_ARGS__);
#else
#define DEBUG_PRINT(fmt,...)
#endif

// Given to me
extern JPARK myPark;
extern int parkMutexSemId;						// protect park access
extern int jurassicDisplaySemId;
extern int fillSeatSemId[NUM_CARS];			// (signal) seat ready to fill
extern int seatFilledSemId[NUM_CARS];			// (wait) passenger seated
extern int rideOverSemId[NUM_CARS];			// (signal) ride over
extern int visitors;
int tickets;
int park_cap;
int museum_cap;
int giftshop_cap;
int wakeup_driver;
int need_to_drive;
int need_driver_mutex;
int need_ticket;
int buy_ticket;
int ticket_ready;
int get_passenger;
int seat_taken;
int mailbox_empty;
int mailbox_full;
int mailbox;
int driver_mailbox_empty;
int driver_mailbox_full;
int driver_mailbox;
int visitor_sem[NUM_CARS][NUM_SEATS];
int drivers_sem[NUM_CARS]; //holds corresponding driver
int car_mailbox_empty;
int car_mailbox_full;
int car_mailbox;

void initializeGlobalVariables() {
	
	park_cap = createSemaphore("park_capacity", COUNTING, MAX_IN_PARK);
	tickets = createSemaphore("tickets", COUNTING, MAX_TICKETS);
	museum_cap = createSemaphore("museum_capactiy", COUNTING, MAX_IN_MUSEUM);
	giftshop_cap = createSemaphore("giftshop_capacity", COUNTING, MAX_IN_GIFTSHOP);
	
	//mutex sems
	need_driver_mutex = createSemaphore("need_driver", BINARY, 1);

	//signal sems (0 so someone has to signal them first)
	wakeup_driver = createSemaphore("wakeup_driver", BINARY, 0);
	need_ticket = createSemaphore("need_ticket", BINARY, 0);
	buy_ticket = createSemaphore("buy_ticket", BINARY, 0);
	get_passenger = createSemaphore("get_passenger", BINARY, 0);
	seat_taken = createSemaphore("seat_taken", BINARY, 0);
	ticket_ready = createSemaphore("ticket_ready", BINARY, 0);

	mailbox_empty = createSemaphore("mailbox_empty", BINARY, 1);
	mailbox_full = createSemaphore("mailbox_full", BINARY, 0);

	driver_mailbox_empty = createSemaphore("driver_mailbox_empty", BINARY, 1);
	driver_mailbox_full = createSemaphore("driver_mailbox_full", BINARY, 0);

	car_mailbox_empty = createSemaphore("car_mailbox_empty", BINARY, 1);
	car_mailbox_full = createSemaphore("car_mailbox_full", BINARY, 0);

	srand(time(0));	
}

// ***********************************************************************
// ***********************************************************************
// carTask
int carTask(int argc, char* argv[])
{

    // while there are still people in the park
	while (myPark.numExitedPark < visitors) {

        //swapTask();

		//wait for available seat
		semWait(fillSeatSemId[atoi(argv[1])]);

		//signal for visitor to take that available seat
		semSignal(get_passenger);

		//wait for visitor to reply
		semWait(seat_taken);

		//record semaphore visitor just put in mailbox
		//car keeps an array of its visitors
		int curr_pass;
		semWait(parkMutexSemId);
		curr_pass = myPark.cars[atoi(argv[1])].passengers;
		semSignal(parkMutexSemId);

		semWait(mailbox_full);
		visitor_sem[atoi(argv[1])][curr_pass] = mailbox;
		semSignal(mailbox_empty);
		
		semSignal(seatFilledSemId[atoi(argv[1])]);
		
		//if last passenger
		int curr_pass_num;
		semWait(parkMutexSemId);
		curr_pass_num = myPark.cars[atoi(argv[1])].passengers;
		semSignal(parkMutexSemId);

		if (curr_pass_num == NUM_SEATS) {
			//wait until no one else is trying to access a driver
			semWait(need_driver_mutex);

			//wake him up
			semSignal(wakeup_driver);

			//tell him he's driving
			semSignal(need_to_drive);

			//keep track of which driver just agreed to drive this car
			//wait until driver mailbox is full
			semWait(driver_mailbox_full);
			drivers_sem[atoi(argv[1])] = driver_mailbox; //so we can signal when driver is done
			semSignal(driver_mailbox_empty); //signal we emptied it/got the information inside it
			
			//tell driver what car he is driving
			semWait(car_mailbox_empty);
			car_mailbox = atoi(argv[1]) + 1;
			semSignal(car_mailbox_full);

			//got driver
			semSignal(need_driver_mutex);
		
			//now that car is full, wait until ride is over
			semWait(rideOverSemId[atoi(argv[1])]);

			//when ride is over, loop over that array of visitors
			int i;
			for (i = 0; i < NUM_SEATS; i++) {
				semSignal(visitor_sem[atoi(argv[1])][i]); //tell every visitor in this car teh ride is over
			}
			//release driver
			semSignal(drivers_sem[atoi(argv[1])]);
		}
	}

	return 0;

} // end carTask()

// ***********************************************************************
// ***********************************************************************
// visitorTask(int argc, char* argv[])
int visitorTask(int argc, char* argv[])
{
	//initialize private semaphores for this visitor
	char buf0[32], buf1[32];
	sprintf(buf0, "visitor%s_timing_sem", argv[1]);
	sprintf(buf1, "visitor%s_personal_sig_sem", argv[1]);
	int vis_timing_sem = createSemaphore(buf0, COUNTING, 0);
	int vis_sig_sem = createSemaphore(buf1, BINARY, 0);

	{
		//wait to show up outside park
		insertDeltaClock(rand() % 100, vis_timing_sem, 0);
		semWait(vis_timing_sem);

		//visitor waits for mutex so it can update park interface
		semWait(parkMutexSemId);
		myPark.numOutsidePark++;
		//give up mutex so park display can update itself, others can use mutex
		semSignal(parkMutexSemId);
	}

	{
		//visitor waits until park is empty enough to enter, then enters
		semWait(park_cap);

		semWait(parkMutexSemId);
		//enter park
		myPark.numOutsidePark--;
		myPark.numInPark++;
		//visitor immediately enters ticket line
		myPark.numInTicketLine++;
		semSignal(parkMutexSemId);
	}

	{
		//wait in ticket line for some time
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);

		//wait on a ticket to be available (resource sem)
		semWait(tickets);
		//now that available, wait until no one is asking any driver for anything
		semWait(need_driver_mutex);
		{
			//signal you need a ticket
			semSignal(need_ticket);
			{
				//wake up the driver
				semSignal(wakeup_driver);
	
				//wait until ticket available
				semWait(ticket_ready);
			}
		}
		//release driver
		semSignal(need_driver_mutex);
		
		//update interface
		semWait(parkMutexSemId);
		myPark.numInTicketLine--;
		myPark.numTicketsAvailable--;
		//visitor immediately enters museum line
		myPark.numInMuseumLine++;
		semSignal(parkMutexSemId);
	}

	//wait for a time in line for museum, leaves line and enter museum
	{
		//time waiting in line
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);
		//wait for a spot in museum to open up
		semWait(museum_cap);

		//update interface	
		semWait(parkMutexSemId);
		myPark.numInMuseumLine--;
		myPark.numInMuseum++;
		semSignal(parkMutexSemId);
	}


	//leave museum, enter tour car line
	{
		//time in museum
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);
		//give up spot in museum, enter tour car line
		semSignal(museum_cap);
		semWait(parkMutexSemId);
		myPark.numInMuseum--;
		myPark.numInCarLine++;
		semSignal(parkMutexSemId);
	}
	
	//leave tour car line, take tour, give up ticket
	{
		//wait in tour car line for a bit
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);

		//wait until a car needs a passenger
		semWait(get_passenger);
		//tell car my personal semaphore via mailbox
		semWait(mailbox_empty);
		mailbox = vis_sig_sem;
		semSignal(mailbox_full);

		//take a seat then
		semSignal(seat_taken);

		//tell display that visitor left line, enter car
		semWait(parkMutexSemId);
		myPark.numInCarLine--;
		myPark.numInCars++;
		myPark.numTicketsAvailable++;
		semSignal(parkMutexSemId);
	
		//give up ticket after boarding tour car
		semSignal(tickets);
	}

	//wait for ride to be over, leave tour
	{
		semWait(vis_sig_sem);
		semWait(parkMutexSemId);
		myPark.numInCars--;
		myPark.numInGiftLine++;
		semSignal(parkMutexSemId);
	}

	//enter gift shop
	{
		//time waiting in line
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);
		//wait for the gift shop to have a spot for visitor to enter
		semWait(giftshop_cap);

		//enter gift shop, show it on interface
		semWait(parkMutexSemId);
		myPark.numInGiftLine--;
		myPark.numInGiftShop++;
		semSignal(parkMutexSemId);
	}

	//exit gift shop, waits for mutex so it can show it's leaving the park
	{
		//time in gift shop
		insertDeltaClock(rand() % 30, vis_timing_sem, 0);
		semWait(vis_timing_sem);
		//give up spot in gift shop
		semSignal(giftshop_cap);
	
		semWait(parkMutexSemId);
		myPark.numInGiftShop--;
		myPark.numInPark--;
		myPark.numExitedPark++;
		semSignal(parkMutexSemId);
	}

	//give back a slot for someone else to come in
	semSignal(park_cap);
	
	return 0;
} // end visitorTask

// ***********************************************************************
// ***********************************************************************
// driverTask
int driverTask(int argc, char* argv[])
{
	char buf[32];
	sprintf(buf, "driver%s_sig_sem", argv[1]);
	int driver_sig_sem = createSemaphore(buf, COUNTING, 0);
	
	while (TRUE) {
		semWait(wakeup_driver);
		
		if (semTryLock(need_ticket)) {
			
			semWait(parkMutexSemId);
			myPark.drivers[atoi(argv[1])] = -1;
			semSignal(parkMutexSemId);
			semSignal(ticket_ready);
		}
		else if (semTryLock(need_to_drive)) {

			semWait(driver_mailbox_empty);
			driver_mailbox = driver_sig_sem;
			semSignal(driver_mailbox_full);

			int car_driver_is_driving;
			semWait(car_mailbox_full);
			car_driver_is_driving = car_mailbox;
			semSignal(car_mailbox_empty);

			semWait(parkMutexSemId);
			myPark.drivers[atoi(argv[1])] = car_driver_is_driving; 
			semSignal(parkMutexSemId);
		
			semWait(driver_sig_sem); //wait until ride is over and signaled by car task
		}
		else
			printf("Error: Driver woken up when a ticket or driver not needed.");
		
		//put driver to sleep
		semWait(parkMutexSemId);
		myPark.drivers[atoi(argv[1])] = 0;
		semSignal(parkMutexSemId);
	}
	return 0;
} // end driverTask

/**
*  Use this function to clean up any heap memory
*  after the park has finished.  It will be called by
*  the park interface (park_interface.c).
*/
void parkCleanup() {
}
