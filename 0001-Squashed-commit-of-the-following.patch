From 8498f5f9f6d96e974893b87dc1abeedf431820d9 Mon Sep 17 00:00:00 2001
From: michael <chmdko@gmail.com>
Date: Mon, 11 Feb 2013 23:07:58 -0700
Subject: [PATCH] Squashed commit of the following:

commit b9d99e6e0e37c87c382a5c5f34aece001647c671
Author: michael <chmdko@gmail.com>
Date:   Mon Feb 11 23:05:26 2013 -0700

    Added comments to delta_clock.c, fixed Makefile to reference it for make swap too, added testlist.c to show my testing implementation, and added delta_clock.txt

commit ec82254d99b750c2a93fb2cfd9849e01c4c9ff4a
Author: michael <chmdko@gmail.com>
Date:   Mon Feb 11 14:29:18 2013 -0700

    delta clock working, with myOldClk fixed by making its initialization valid and setting it correctly at end with += clock_diff * ONE_TENTH_SEC, and plugging in init_value correctly for periodic events

commit ab39bd188214049541e8a363040ba31a48a21cb5
Author: michael <chmdko@gmail.com>
Date:   Sat Feb 9 23:50:48 2013 -0700

    delta clocks almost done, can't get ticks right

DeltaClock assignment submission. My delta_clock.txt and testlist.c (mentioned in
delta_clock.txt) are found in the main /kernel directory.
---
 Makefile                  |   12 ++--
 delta-clock.txt           |   52 ++++++++++++++
 inc/kernel.h              |    1 +
 inc/my_tasks.h            |    1 +
 inc/system_calls.h        |    5 +-
 inc/system_calls_kernel.h |    1 +
 src/commands.c            |    3 +-
 src/delta_clock.c         |  120 +++++++++++++++++++++++++++++++-
 src/kernel.c              |   34 ++++++++-
 src/my_tasks.c            |   15 ++++
 src/queue_list.c          |   93 ++++++++++++++++++++++---
 src/shell.c               |  119 ++++++++++++++++++++++++++++----
 src/signals.c             |    2 +-
 src/system_calls.c        |   19 +++++
 src/system_calls_kernel.c |   18 +++++
 src/trap.c                |    4 +-
 testlist.c                |  168 +++++++++++++++++++++++++++++++++++++++++++++
 17 files changed, 630 insertions(+), 37 deletions(-)
 create mode 100644 delta-clock.txt
 create mode 100644 testlist.c

diff --git a/Makefile b/Makefile
index 139349c..c3cd086 100644
--- a/Makefile
+++ b/Makefile
@@ -38,8 +38,8 @@ INCLUDE = 	-Iinc
 ## Specific defines for the build process
 ## directives
 #ARCH = GCCW32
-ARCH = GCCOSX64
-#ARCH = GCC64
+#ARCH = GCCOSX64
+ARCH = GCC64
 
 DEFINE = -D$(ARCH) -DKDEBUG=FALSE
 
@@ -90,8 +90,8 @@ OBJS	=			obj/kernel.o							\
 					obj/my_tasks.o							\
 					obj/semaphores_tasks.o					\
 					obj/commands.o							\
-				 	obj-ref/$(ARCH)/shell.o					\
-					obj-ref/$(ARCH)/delta_clock.o			\
+				 	obj/shell.o								\
+					obj/delta_clock.o			\
 					obj-ref/$(ARCH)/semaphores.o			\
 					obj-ref/$(ARCH)/scheduler.o				\
 					obj-ref/$(ARCH)/queue_list.o			\
@@ -114,8 +114,8 @@ SWAPOBJS	=		obj/kernel-swap.o						\
 					obj/my_tasks-swap.o						\
 					obj/semaphores_tasks-swap.o				\
 					obj/commands-swap.o	                    \
-					obj-ref/$(ARCH)/shell-swap.o			\
-					obj-ref/$(ARCH)/delta_clock-swap.o		\
+					obj/shell-swap.o						\
+					obj/delta_clock-swap.o					\
 					obj-ref/$(ARCH)/semaphores-swap.o		\
 					obj-ref/$(ARCH)/scheduler-swap.o		\
 					obj-ref/$(ARCH)/queue_list-swap.o		\
diff --git a/delta-clock.txt b/delta-clock.txt
new file mode 100644
index 0000000..c1b8795
--- /dev/null
+++ b/delta-clock.txt
@@ -0,0 +1,52 @@
+My implementation:
+I used a queue data structure to store and access events that need to be
+signaled after arbitrary amounts of time as determined by the caller who
+passes in events. In the _insertDeltaClock method, events are enqueued in a
+particular way-- depending on the time that that event needs to be signalled
+at, it is given a particular place in the queue, possibly passing other items
+in the queue on its way toward the front. For example, if the queue contains
+events
+
+ A (time of 4)
+ C (time of 2 after A)
+ D (time of 0 after C, ie simultaneously)
+ B (time of 8 after C & D)
+ 
+  adding event E with a time of 5 would put it right before A. The resultant
+  queue is
+
+ A (time of 4)
+ E (time of 1 after A)
+ C (time of 1 after E)
+ D (time of 0 after C)
+ B (time of 8 after C & D)
+
+Items with time of 0 are not queued, and instead signalled immediately.
+
+Deleting items from the queue is a similar process, where the time of the
+event succeeding it in order will be increased according to what the old event
+had (since it no longer represents time being taken up).
+
+When the _tick function is called, I determine the amount of time that has
+passed since the last call and subtract that time from the event at the front
+of the queue, until it reaches 0 or there is no longer time to subtract
+(whichever comes first). If the time of the event is <= 0, it is signaled, and
+I proceed doing the same thing for the next front of the list if there is
+still time passed to subtract.
+
+Testing my implementation:
+To test my delta_clock, I first made a test file (testlist.c) so I could just
+test the functionality of inserting and deleting immediately without having to
+rely on system calls or ticks. To test the ticking function, I first relied on
+various printf's so I could determine the state of the queue each time _tick
+was called, and I also called _list on the delta_clock to see what events I
+should be expecting. This helped me realize that my periodic events weren't
+working correctly, something that I couldn't test with just my testlist.c
+file. I relied on the jp N & and testdc functions in the end once I had the
+entire thing working.
+
+Limitations:
+The only limitation I can think of is that the way clock drift is handled, I
+am not being exact. Setting oldClkTime sets it to approximate 1/10th marks
+instead of exactly where it was at the end of the function.
+
diff --git a/inc/kernel.h b/inc/kernel.h
index a331160..5f3eabc 100644
--- a/inc/kernel.h
+++ b/inc/kernel.h
@@ -166,6 +166,7 @@ int _addToTics1SecList(Semaphore* s);
 int _removeFromTics1SecList(Semaphore* s);
 void _listTasks();
 Semaphore* _helloWorld(int num, char* phrase, Semaphore* sem);
+int _myNewCall(int taskId, int newPriority);
 
 // ***********************************************************************
 // system prototypes
diff --git a/inc/my_tasks.h b/inc/my_tasks.h
index fcbe64f..323eaaa 100644
--- a/inc/my_tasks.h
+++ b/inc/my_tasks.h
@@ -5,4 +5,5 @@ int myspin(int argc, char* argv[]);
 int mystop(int argc, char* argv[]);
 int mysplit(int argc, char* argv[]);
 int testScheduler(int argc, char* argv[]);
+int mynewtask(int argc, char* argv[]);
 #endif
diff --git a/inc/system_calls.h b/inc/system_calls.h
index 5efaf47..8a1d268 100644
--- a/inc/system_calls.h
+++ b/inc/system_calls.h
@@ -7,7 +7,7 @@
 #define SWAP swapTask();
 
 // System Calls
-#define MAXSYSCALLS			20
+#define MAXSYSCALLS			21
 #define GETTIDCALL			1
 #define SWAPTASKCALL		2
 #define SEMSIGNALCALL		3
@@ -28,8 +28,9 @@
 #define LISTSEMSCALL		18
 #define LISTDELTACLOCKCALL	19
 #define WAITCALL        	20
+#define MYNEWCALL			21
 
-
+int myNewCall(int, int);
 int helloWorldTask(int, char**);
 tid_t gettid();
 void swapTask();
diff --git a/inc/system_calls_kernel.h b/inc/system_calls_kernel.h
index b3c1bc5..bfd4c7c 100644
--- a/inc/system_calls_kernel.h
+++ b/inc/system_calls_kernel.h
@@ -21,5 +21,6 @@ int U_insertDeltaClock();
 int U_deleteClockEvent();
 int U_waittid();
 int U_wait();
+int U_myNewCall();
 
 #endif
diff --git a/src/commands.c b/src/commands.c
index 5a976ef..aab065e 100644
--- a/src/commands.c
+++ b/src/commands.c
@@ -19,7 +19,7 @@ Command builtin_cmd_list[] = {
 	{	"reset",		"rs",		cmd_reset,				"Reset system"}
 };
 
-int number_commands = 45;
+int number_commands = 46;
 Command command_list[] = {
 
 	// My Tasks - 4
@@ -27,6 +27,7 @@ Command command_list[] = {
 	{	"mysplit",		"mysplit",	mysplit,				"Create task and wait for task to terminate"},
 	{	"mystop",		"mystop",	mystop,					"Sleep <n> seconds then KSIGTSTOP self"},
 	{	"myspin",		"myspin",	myspin,					"Sleep for <n> seconds and exit"},
+	{	"mynewtask",	"mynewtask",	mynewtask,			"Gets group id of passed in taskId, changes its priority with passed in priority, unless 0, then no change"},
 
 	// Delta Clock Task - 3
 	{	"testsc",		"tsc",		testScheduler,			"Test scheduler"},
diff --git a/src/delta_clock.c b/src/delta_clock.c
index 0077a1b..d2da83d 100644
--- a/src/delta_clock.c
+++ b/src/delta_clock.c
@@ -51,10 +51,55 @@ unsigned long myOldClkTime;
  * is 0, the semaphore should be signaled before returning.
  */
 int _insertDeltaClock(int time, int semId, int periodic)
-{
+{	
     assert("Error: Trying to call _insertDeltaClock in User Mode\n" && superMode);
 
+	if (time < 0 || _getSemaphore(semId) == NULL)
+		return -1;
+
+	if (time == 0) {
+		_semSignal(semId);
+		return 0;
+	}
+	
+	clockEvent* event = deltaClock;
+	int total_time = 0;
+	
+	clockEvent* new_event = malloc(sizeof(clockEvent));
+	new_event->init_value = time;
+	new_event->semId = semId;
+	new_event->periodic = periodic;
+	
+	if (event == NULL || time <= event->time) { //new_event should go at front of list
+
+		new_event->time = time;
+		new_event->next = event;
+		deltaClock = new_event;
+
+		if (event != NULL)
+			event->time -= time;
+			
+		return 0;
+	}
+	else { //the first isn't null, or is less than the time of event we're inserting
+		total_time += event->time;
+		
+		while (event->next != NULL && time > (total_time + event->next->time)) {
+			total_time += event->next->time;
+			event = event->next;
+		} //if event->next is null, we're at the end of the list, so just tack it on
+		  //we're also here if our time is less than the total time accumulated plus next
+		new_event->time = time - total_time;
+		new_event->next = event->next;
+		if (new_event->next != NULL)
+			new_event->next->time -= new_event->time;
+		event->next = new_event;
+		
+		return 0;
+	}
+
 	return -1;
+	
 }
 
 /**
@@ -70,6 +115,34 @@ int _insertDeltaClock(int time, int semId, int periodic)
  */
 int _deleteClockEvent(int semId)
 {
+	clockEvent* event = deltaClock;
+	if (event == NULL)
+		 return 0;
+		 
+	// checking if first is what we want, if so, removing it from front and checking again
+	while (event != NULL && event->semId == semId) {
+		if (event->next != NULL)
+			event->next->time += event->time;
+		deltaClock = event->next;
+		free(event);
+		event = deltaClock;
+	}
+	
+	while (event != NULL && event->next != NULL) {	// we know first is not what we want
+			
+		if (event->next->semId == semId) {
+			
+			if (event->next->next != NULL) {
+				event->next->next->time += event->next->time;
+			}
+			
+			clockEvent* to_delete = event->next;
+			
+			event->next = event->next->next;
+			free(to_delete);
+		}
+		event = event->next;		
+	}
 	return 0;
 }
 
@@ -83,7 +156,49 @@ int _deleteClockEvent(int semId)
  * added back to the delta clock.
  */
 int _tickDeltaClock() {
+    
+    //_listDeltaClock();
+	long clock_difference = 0;
+	long time_left = 0;
+	
     assert("Error: Trying to call _tickDeltaClock in User Mode\n" && superMode);
+   
+    myClkTime = clock();
+	
+	// for the first time tick is called, so we can instantiate the oldClk accordingly
+	if (myOldClkTime == 0)
+		myOldClkTime = myClkTime;
+
+	clock_difference = (myClkTime - myOldClkTime)/ONE_TENTH_SEC;
+	time_left = clock_difference;
+	
+	if (deltaClock != NULL) {
+	
+		while (time_left > 0 && deltaClock) {
+		
+			int d_time = deltaClock->time;
+			deltaClock->time -= time_left;
+			time_left -= d_time;
+		
+			if (deltaClock->time <= 0) {
+				_semSignal(deltaClock->semId);
+		
+				// saving these in case its periodic
+				// we want to delete the event from queue before inserting it again,
+				// or we would be deleting the just inserting event
+				int init_value = deltaClock->init_value;
+				int semId = deltaClock->semId;
+				int periodic = deltaClock->periodic;
+		
+				_deleteClockEvent(deltaClock->semId);
+		
+				if (periodic)
+					_insertDeltaClock(init_value, semId, periodic);
+			}
+		}
+	}
+	//to get us back aligned on ticks and avoid clock drift
+	myOldClkTime += clock_difference * ONE_TENTH_SEC;
  	return 0;
  }
 
@@ -94,6 +209,9 @@ int _tickDeltaClock() {
 int _listDeltaClock()
 {
     assert("Error: Trying to call _listDeltaClock in User Mode\n" && superMode);
+    if (!deltaClock) {
+    	return -1;
+    }
     puts("*********************");
     puts("Delta Clock Contents");
     // delta clock queue is empty
diff --git a/src/kernel.c b/src/kernel.c
index de08c5f..bed2ba3 100644
--- a/src/kernel.c
+++ b/src/kernel.c
@@ -82,6 +82,7 @@ int tgidCounter;
 // -----
 
 // Always add new system calls here
+// from line 401, these are actually functions (notice the () after the array)
 int (*sys_call_table[MAXSYSCALLS]) () = {	U_gettid,
 											U_swapTask,
 											U_semSignal,
@@ -101,7 +102,8 @@ int (*sys_call_table[MAXSYSCALLS]) () = {	U_gettid,
 											U_waittid,
 											U_listSems,
 											U_listDeltaClock,
-											U_wait};
+											U_wait,
+											U_myNewCall};
 
 // **********************************************************************
 // **********************************************************************
@@ -322,7 +324,7 @@ int dispatcher()
 				break;
 			}
 			else if ((kernelReturnValue == KERNEL_CHECK_SIGNALS) ||
-					 (kernelReturnValue == 0)) {
+					 (kernelReturnValue == 0)) {//goes here first after returning from setjmp (krv = 0)
 				superMode = TRUE;
 
 				// Unblock a signal that was being handled
@@ -402,7 +404,7 @@ int dispatcher()
 					if (tcb[curTask].handlingSignal == TRUE) {
 						// Assign superMode
 						superMode = FALSE;
-
+						//the following longjmp jumps to the context saved in trap.c
 						longjmp(*((jmp_buf*)system_call_params->params[0]),TRAP_NORMAL);
 					} else {
 						// Check for signals
@@ -1020,6 +1022,32 @@ void _listTasks()
 }
 
 /**
+ * _myNewCall: actual implementation of myNewCall, the system call
+ * returns task group id of passed in taskId, also printing information about it
+ * also changes priority of the task (probably not the smartest thing to let
+ * a user do in this way, but I wanted to demonstrate me poking around kernel's
+ * data structures).
+ * if newPriority = 0, no priority is changed
+ */
+int _myNewCall(int taskId, int newPriority)
+{
+	printf("TaskId %d", taskId);
+	if (curTask == taskId)
+		printf(" (current task)");
+   	printf("\n--------Information--------\n");
+	printf("Name: %s\n", tcb[taskId].name);
+	printf("State: %d\n", tcb[taskId].state);
+	if (newPriority > 0) {
+		printf("Old Priority: %d\n", tcb[taskId].priority);
+		tcb[taskId].priority = newPriority;
+		printf("New Priority: %d\n", tcb[taskId].priority);
+	}
+	else
+		printf("Priority: %d\n", tcb[taskId].priority);
+	return tcb[taskId].tgid;	//task's group id (tid_t is typedef-ed from an int)
+}
+
+/**
  * _helloWorld: used for old system calls lab
  */
 Semaphore* _helloWorld(int num, char* phrase, Semaphore* sem)
diff --git a/src/my_tasks.c b/src/my_tasks.c
index 032b303..9587a70 100644
--- a/src/my_tasks.c
+++ b/src/my_tasks.c
@@ -147,6 +147,21 @@ int mystop(int argc, char* argv[]) {
 	return 0;
 }
 
+int mynewtask(int argc, char* argv[]) {	
+
+    if (argc != 3) {
+		fprintf(stderr, "Usage: %s <n> <n>\n", argv[0]);
+		return -1;
+    }
+	
+	myNewCall(atoi(argv[1]), atoi(argv[2]));
+	
+	while (1) {
+		swapTask();
+	}
+
+	return 0;
+}
 
 int testScheduler(int argc, char* argv[]) {
     return 0;
diff --git a/src/queue_list.c b/src/queue_list.c
index fc00da7..5434ebd 100644
--- a/src/queue_list.c
+++ b/src/queue_list.c
@@ -11,45 +11,122 @@
 // as a task cannot appear in more than one queue at any time
 Node tasks[MAX_TASKS];
 
-Node* getNode(tid_t tid) {
+Node* getNode(tid_t tid) 
+{
+	Node* nd = &tasks[tid];
+	assert(nd->tid == NO_TASK);	
+	nd->tid = tid;
+	nd->next = NULL;
+	return nd;
 }
 
 void clearNode(Node* node)
 {
+	node->tid = NO_TASK;
+	node->next = NULL;
 	return;
 }
 
-QueueList* makeQueue(unsigned short priority) {
-    QueueList* queue = NULL; 
-    return queue;
+QueueList* makeQueue(unsigned short priority) 
+{
+    QueueList* queue = (QueueList*) malloc(sizeof(QueueList)); 
+    queue->curNode = NULL;
+	queue->lastNode = NULL;
+	queue->nextList = NULL;
+	queue->priority = priority;
+	return queue;
 }
 
 
 int removeNode(QueueList* list, tid_t tid)
 {
-	return NO_TASK;
+	Node* currentNode = list->curNode;
+	if (currentNode == NULL)
+		return NO_TASK;
+	if (currentNode->tid == tid)
+	{
+		list->curNode = currentNode->next;
+		clearNode(currentNode);
+		return TRUE;
+	}
+	else
+	{
+		while (currentNode->next != NULL)
+		{
+			if (currentNode->next->tid == tid)
+			{
+				Node* nextNode = currentNode->next->next;
+				if (list->lastNode == nextNode)
+					list->lastNode = currentNode;	
+				clearNode(currentNode->next);
+				currentNode->next = nextNode;
+				return TRUE;
+			}
+			currentNode = currentNode->next;
+		}
+		return NO_TASK;
+	}
+	//never gets here
+	return FALSE;
 }
 
 void enqueue(QueueList* list, tid_t tid)
 {
-    return;
+	if (list->curNode == NULL) //if list is empty, so lastNode is also null
+	{
+		list->lastNode = getNode(tid);
+	   	list->curNode = list->lastNode;	
+	}
+	else	
+	{
+		list->lastNode->next = getNode(tid);
+		list->lastNode = list->lastNode->next;
+	}
+	return;
 }
 
 int dequeue(QueueList* list)
 {
-    int tid;
-
+	if (list->curNode == NULL)
+	{
+		return NO_TASK;
+	}
+	Node* cur = list->curNode;	
+    int tid = list->curNode->tid;
+	list->curNode = list->curNode->next;
+	if (list->curNode == NULL)
+		list->lastNode = NULL;
+	clearNode(cur);	
     return tid;
 }
 
+//For testing purposes
+void printQueue(QueueList* list)
+{
+	Node* cur = list->curNode;
+	while (cur != NULL)
+	{
+		printf("%i", cur->tid);
+		cur = cur->next;
+	}
+	printf("\n");
+}
 
 void clearList(QueueList *list)
 {
 	return;
+	//list->curNode == NULL;
 }
 
 void clearListNode(QueueList *list)
 {
+	//Node* currentNode = list->curNode;
+	//while (currentNode != NULL)
+	//{
+	//	Node* next = currentNode->next;
+	//	free(currentNode);
+	//	currentNode = next;
+	//}
 	return;
 }
 
diff --git a/src/shell.c b/src/shell.c
index 9ff3341..c6eb5a4 100644
--- a/src/shell.c
+++ b/src/shell.c
@@ -136,7 +136,6 @@ void eval(char *cmdline)
   char *argv[MAXARGS]; /* argv for execve() */
   int bg;              /* should the job run in bg or fg? */
 
-
   tid_t tid = 0;       /* task id */
   sigmask_t mask;      /* signal mask */
 
@@ -148,18 +147,79 @@ void eval(char *cmdline)
   }
 
   if (!builtin_cmd(argv)) {
+	  // Look up the command to see if it exists in normal commands
+	  char *cmd = argv[0];
+  	  int index = 0;
+
+  	  if (!strcmp(cmd, "&")) { /* Ignore singleton & */
+    	return;
+  	  }
+
+  	  index = find_cmd(command_list, number_commands, cmd);
+	  if (KDEBUG) printf("INDEX: %d\n", index);
+  
+	  if (index == -1) {
+		// Print error because command doesn't exist
+	  	printf("ERROR: command doesn't exist.\n");
+		return;
+	  }
 	  
+	  // Too many jobs already, don't execute command
 	  if (activejobs >= MAXJOBS) {
-		  printf("ERROR: already at MAXJOBS of %d\n", MAXJOBS);
-		  return;
-	  }
+	    printf("ERROR: already at MAXJOBS of %d\n", MAXJOBS);
+	    return;
+	   }
 
-	  // Create and start the task
-	  sigEmptySet(&mask);
+	  // Build a mask and block signals in the mask
+	  if (sigEmptySet(&mask) < 0) {
+        kernel_error("sigemptyset error");
+      }
+      if (sigAddSet(&mask, KSIGCHLD)) {
+        kernel_error("sigaddset error");
+      }
+      if (sigAddSet(&mask, KSIGINT)) {
+        kernel_error("sigaddset error");
+      }
+      if (sigAddSet(&mask, KSIGTSTP)) {
+        kernel_error("sigaddset error");
+      }
+      if (sigProcMask(KSIG_BLOCK, &mask) < 0) {
+       	kernel_error("sigprocmask error");
+   	  }
+
+	  // Create a task
+	  NewTask* taskInfo = (NewTask*) malloc(sizeof(NewTask));
+	  taskInfo->name = cmd;
+	  taskInfo->task = command_list[index].func;
+	  taskInfo->priority = MED_PRIORITY;
+	  taskInfo->argc = get_argc_value(argv);
+	  taskInfo->argv = argv;
+	  taskInfo->parentHandlers = FALSE;
+	  taskInfo->tgidNew = TRUE;
+
+	  tid = createTask(taskInfo);
+	  if (tid < 1) {
+		printf("Error: could not create task %s", cmdline);
+		return;
+	  }
+	  
+	  // Add new task to jobs list
+	  int state = !bg ? FG : BG;
+	  if (!addjob(jobs, tid, state, cmdline)) {
+		printf("Error: could not add job %s", cmdline);
+		return;
+	  }
 
-          if (!bg) {
-                waitfg(tid); // wait for process to end if its in the foreground
-          }
+	  // Unblock signals
+   	  if (sigProcMask(KSIG_UNBLOCK, &mask) < 0) {
+		  kernel_error("sigprocmask error");
+	  }
+	  	    
+      if (!bg) {
+         waitfg(tid); // wait for process to end if its in the foreground
+      }
+	  else
+		  printf("[%d] (%d) %s",getjobtid(jobs,tid)->jid ,tid,cmdline);
   }
   return;
 }
@@ -536,24 +596,57 @@ int cmd_do_bgfg(int argc, char* argv[])
  */
 void sigchld_handler(int sig)
 {
+	tid_t tid;
+	int status;
+	while ((tid = wait(&status)) > 0) { //while tid > 0, meaning there still is a child, status tells us 
+										//why child terminated, so we need to do something with that child
+		// Find job in JobList
+		struct job_t* j = getjobtid(jobs, tid);
+		
+		if (WIFKSTOPPED(status)) { //process stopped (ctrl-w/stop signal)
+		   // Set status to stoppped
+		   //printf("1\n");
+		   printf("Job [%d] (%d) stopped by signal %d\n", j->jid,tid,WSTOPKSIG(status));
+		   (*j).state = ST;
+		}
+		if (WIFKEXITED(status)) { //process exited normally (example, testsc finishes normally)
+		   // Remove it from job list
+		   //printf("2\n");
+		   printf("Job [%d] (%d) terminated by signal %d\n", j->jid,tid,WKEXITSTATUS(status));
+		   deletejob(jobs, tid);
+		}
+		else if (WIFKSIGNALED(status)) { //process terminated from a signal (ctrl-x/interrupt signal)
+		   //printf("3\n");
+		   printf("Job [%d] (%d) terminated by signal %d\n", j->jid,tid,WTERMKSIG(status));
+		   deletejob(jobs, tid);
+		}
+	}
     return;
 }
 
 /*
  * sigint_handler - The kernel sends a KSIGINT to the shell whenver the
- *    user types ctrl-c at the keyboard.  Catch it and send it along
+ *    user types ctrl-x (ctrl-c) at the keyboard.  Catch it and send it along
  *    to the foreground job.
  */
 void sigint_handler(int sig) {
+	tid_t tid;
+	tid = fgtid(jobs);
+	sigKill(tid,sig);
+	//printf("Job [%d] (%d) terminated by signal %d\n",getjobjid(jobs, tid)->jid,tid,sig);
     return;
 }
 
 /*
  * sigtstp_handler - The kernel sends a KSIGTSTP to the shell whenever
- * the user types ctrl-z at the keyboard. Catch it and suspend the
+ * the user types ctrl-w (ctrl-z) at the keyboard. Catch it and suspend the
  * foreground job by sending it a KSIGTSTP.
  */
 void sigtstp_handler(int sig) {
+	tid_t tid;
+	tid = fgtid(jobs);
+	sigKill(tid, sig);
+	//printf("Job [%d] (%d) stopped by signal %d\n",getjobjid(jobs, tid)->jid,tid,sig);
     return;
 }
 //@ENABLE_SWAPS
@@ -600,7 +693,7 @@ int addjob(struct job_t *jobs, tid_t tid, int state, char *cmdline)
 	if (tid < 1)
 		return 0;
 
-	for (i = 0; i < MAXJOBS; i++) {
+	for (i = 0; i < MAXJOBS; i++)  {
 		if (jobs[i].tid == 0) {
 			jobs[i].tid = tid;
 			jobs[i].state = state;
@@ -609,6 +702,7 @@ int addjob(struct job_t *jobs, tid_t tid, int state, char *cmdline)
 			strcpy(jobs[i].cmdline, cmdline);
 			if(KDEBUG) {
 				printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].tid, jobs[i].cmdline);
+				printf("Job state: %d\n", jobs[i].state);
 			}
 			return 1;
 		}
@@ -645,7 +739,6 @@ tid_t fgtid(struct job_t *jobs) {
 	return 0;
 }
 
-/* getjobtid  - Find a job (by TID) on the job list */
 struct job_t *getjobtid(struct job_t *jobs, tid_t tid) {
 	int i;
 
diff --git a/src/signals.c b/src/signals.c
index d8ebc36..fb81193 100644
--- a/src/signals.c
+++ b/src/signals.c
@@ -349,7 +349,7 @@ tid_t _wait(int taskId, int *stat_loc)
 
 //	WIFKSTOPPED
 //
-//  Returns TRUE is status indicates the process is stopped. Otherwise
+//  Returns TRUE if status indicates the process is stopped. Otherwise
 //  returns false.
 int WIFKSTOPPED(int status)
 {
diff --git a/src/system_calls.c b/src/system_calls.c
index d089ef7..31c5d3b 100644
--- a/src/system_calls.c
+++ b/src/system_calls.c
@@ -151,6 +151,25 @@ Semaphore* helloWorld(int num, char* phrase, Semaphore* sem)
 	return (Semaphore*)helloWorldParams.return_value.return_pointer;
 }
 
+//System call wrapper method which traps into the kernel
+int myNewCall(int taskId, int newPriority)
+{
+	// Make parameters structure
+	trap_struct myNewCallParams;
+	jmp_buf buf;
+	void* local_params[3] = { (void*)buf, (void*)&taskId, (void*)&newPriority }; 
+	myNewCallParams.params = local_params;
+
+	assert("Error: Making system call to myNewCall from public interface when already in Kernel Mode (use _myNewCall instead)" && !superMode);
+
+	// Call trap
+	trap(&myNewCallParams,MYNEWCALL);
+
+	// Return value, which was put on the stack in the kernel code
+	// and so needs to be pulled off of it
+	return myNewCallParams.return_value.return_int;
+}
+
 int killTask(int tid)
 {
 	// Make parameters structure
diff --git a/src/system_calls_kernel.c b/src/system_calls_kernel.c
index 3fb1482..9c75d92 100644
--- a/src/system_calls_kernel.c
+++ b/src/system_calls_kernel.c
@@ -113,6 +113,24 @@ int U_helloWorld()
 	return 1;
 }
 
+int U_myNewCall()
+{
+	// Unpack Variables from system_call_params[]
+	int taskId = *((int*)(system_call_params->params[1]));
+	int newPriority = *((int*)(system_call_params->params[2]));
+	int rv = 0;
+
+	_setTrapParamsContext(system_call_params);
+
+	//Do system call
+	//returns group id of task associated with taskId (an int)
+	rv = _myNewCall(taskId, newPriority);
+	system_call_params = _getTrapParamsContext();
+	system_call_params->return_value.return_int = rv;
+
+	return 1;
+}
+
 int U_killTask()
 {
 	// Unpack Variable
diff --git a/src/trap.c b/src/trap.c
index 2d80fcf..f7e8048 100644
--- a/src/trap.c
+++ b/src/trap.c
@@ -38,12 +38,12 @@ void trap(trap_struct* formals, int call_num)
 		
 		// longjmp back to kernel
 		longjmp(k_context, KERNEL_CHECK_SIGNALS);
-	} else {		
+	} else {	// where we go first time through (since context_value=0 initially)?	
 		// Assign values to globals
 		system_call_params = formals;
 		
 		// longjmp to kernel context and return system call value
-		longjmp(k_context, call_num);
+		longjmp(k_context, call_num);//k_context is a global variable, jumps to l324 in kernel.c, returning whatever call_num is
 	}
 	
 	// Never Reaches here
diff --git a/testlist.c b/testlist.c
new file mode 100644
index 0000000..ffcb798
--- /dev/null
+++ b/testlist.c
@@ -0,0 +1,168 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+
+typedef struct event
+{
+	int init_value;
+	int time;
+	int semId;
+	int periodic;
+	struct event* next;
+} clockEvent;
+
+clockEvent* deltaClock = 0;
+
+unsigned long myClkTime;
+unsigned long myOldClkTime;
+
+int insertDeltaClock(int time, int semId, int periodic)
+{
+	/*if (time < 0 || _getSempahore(semId) == NULL)
+		return -1;
+
+	if (time == 0) {
+		semSignal(semId);
+		return 0;
+	}*/
+	
+	clockEvent* event = deltaClock;
+	int total_time = 0;
+	
+	clockEvent* new_event = malloc(sizeof(clockEvent));
+	new_event->init_value = time;
+	new_event->semId = semId;
+	new_event->periodic = periodic;
+	
+	if (event == NULL || time <= event->time) { //new_event should go at front of list
+
+		new_event->time = time;
+		new_event->next = event;
+		deltaClock = new_event;
+
+		if (event != NULL)
+			event->time -= time;
+	}
+	else { //the first isn't null, or is less than the time of event we're inserting
+		total_time += event->time;
+		
+		while (event->next != NULL && time > (total_time + event->next->time)) {
+			total_time += event->next->time;
+			event = event->next;
+		} //if event->next is null, we're at the end of the list, so just tack it on
+		  //we're also here if our time is less than the total time accumulated plus next
+		new_event->time = time - total_time;
+		new_event->next = event->next;
+		if (new_event->next != NULL)
+			new_event->next->time -= new_event->time;
+		event->next = new_event;
+	}
+
+	return -1;
+}
+
+int deleteClockEvent(int semId)
+{
+	clockEvent* event = deltaClock;
+	if (event == NULL)
+		 return -1;
+		 
+	// checking if first is what we want, if so, removing it from front and checking again
+	while (event != NULL && event->semId == semId) {
+		if (event->next != NULL)
+			event->next->time += event->time;
+		deltaClock = event->next;
+		free(event);
+		event = deltaClock;
+	}
+	
+	while (event != NULL && event->next != NULL) {	// not possible that event has the semId now
+			
+		if (event->next->semId == semId) {
+			
+			if (event->next->next != NULL) {
+				event->next->next->time += event->next->time;
+				
+				//printf("semId %d time %d\n", event->next->next->semId,
+				//	event->next->next->time);
+			}
+			
+			clockEvent* to_delete = event->next;
+			
+			event->next = event->next->next;
+			free(to_delete);
+		}
+		event = event->next;		
+	}
+	return 0;
+}
+
+int tickDeltaClock() {
+ 	return 0;
+ }
+
+
+/**
+ *
+ */
+int listDeltaClock()
+{
+    puts("*********************");
+    puts("Delta Clock Contents");
+    // delta clock queue is empty
+    if (!deltaClock) {
+        puts("Empty");
+    }
+    // Print all of the delta clock queue's contents
+    else {
+        clockEvent * n = deltaClock;
+        while (n) {
+            printf("Semaphore %d with time=%d\n", n->semId, n->time);
+            n = n->next;
+        }
+    }
+    puts("*********************");
+	return 0;
+}
+
+int main() {
+
+	listDeltaClock();
+	
+	insertDeltaClock(5,1,0);
+	listDeltaClock();
+	
+	insertDeltaClock(1,2,0);
+	listDeltaClock();
+	
+	insertDeltaClock(1,3,0);
+	listDeltaClock();
+	
+	insertDeltaClock(3,4,0);
+	listDeltaClock();
+	
+	insertDeltaClock(5,5,0);
+	listDeltaClock();
+	
+	insertDeltaClock(6,6,0);
+	listDeltaClock();
+	
+	deleteClockEvent(3);
+	listDeltaClock();
+	
+	deleteClockEvent(4);
+	listDeltaClock();
+	
+	deleteClockEvent(6);
+	listDeltaClock();
+	
+	deleteClockEvent(2);
+	listDeltaClock();
+	
+	deleteClockEvent(5);
+	listDeltaClock();
+	
+	deleteClockEvent(1);
+	listDeltaClock();
+
+}
-- 
1.7.10.4

